name: CI

on:
    push:
        branches: [ "main" ]
    pull_request:
        branches: [ "main" ]

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
            python-version: '3.12'
      #----------------------------------------------
      #        load pip cache if cache exists
      #----------------------------------------------
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: ${{ runner.os }}-pip
      #----------------------------------------------
      #          install and run linters
      #----------------------------------------------
      - run: python -m pip install black flake8 isort
      - run: |
            flake8 . --count --show-source --statistics
            black . --check
            isort .

  test:
    needs: linting
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ]
        python-version: [ "3.12"]
    runs-on: ${{ matrix.os }}
    steps:
      # Checkout with fetch-depth: 0 to ensure all history is available
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: v2-venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction

      # Docker setup for Windows
      - name: Set up Docker on Windows
        if: runner.os == 'Windows'
        uses: docker/setup-buildx-action@v2

      # Verify Docker is running on Windows
      - name: Verify Docker is running (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          docker info || echo "Docker not running"
          docker run --rm hello-world || echo "Docker test failed"

      # Run tests based on OS
      - name: Run tests (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          source .venv/bin/activate
          pytest tests/ -v

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          source .venv/Scripts/activate
          pytest tests/ -v